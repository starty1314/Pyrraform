# This file is the main config file for your service

# app and org for use with dashboard.serverless.com
org: ipattern
app: securityhub
service: securityhub
frameworkVersion: '2' # You can pin your service to only deploy with a specific Serverless version


provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, 'dev'}

  role: arn:aws:iam::12334546789012:role/SecurityHub_Lambda_Role
  runtime: python3.8
  lambdaHashingVersion: 20201221
  memorySize: 256
  timeout: 60
  versionFunctions: false

  deploymentBucket: # Where to put the serverless artifacts
      name: com.hellp.serverless

#  iamRoleStatements:
#      - Effect: Allow
#        Action:
#          - securityhub:ListMembers
#          - securityhub:GetMembers
#          - securityhub:DescribeStandards
#          - securityhub:GetEnabledStandards
#          - securityhub:DescribeHub
#          - securityhub:GetFindings
#          - securityhub:BatchDisableStandards
#          - securityhub:DescribeStandardsControls
#          - securityhub:ListEnabledProductsForImport
#          - securityhub:DescribeProducts
#          - securityhub:BatchEnableStandards
#          - rds-db:connect
#        Resource: "arn:aws:securityhub:*:12334546789012:hub/default"


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
package:
  exclude:
    - venv/**
    - .gitignore
    - tests/**
    - node_modules/**
    - serverless_sdk/**


functions:
  hello:
    name: securityhub-report-${opt:stage, 'dev'}
    package: {} # This is used to fix the bug caused by plugins:serverless-python-requirements
    description: Retrieving SecurityHub Findings
    handler: handler.lambda_handler

    disableLogs: true

    vpc:
      securityGroupIds:
        - sg-xxxxxxxxxxxxxxxxxx
      subnetIds:
        - subnet-xxxxxxxxxxxxxxxxxx
        - subnet-xxxxxxxxxxxxxxxxxx

    events:
      - schedule:
          rate: cron(0 11 ? * * *)
          enabled: true

#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: non-linux
